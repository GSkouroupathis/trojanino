{'TMP': 'C:\\Users\\ithaca\\AppData\\Local\\Temp', 'COMPUTERNAME': 'ITHACA-L1', 'VS140COMNTOOLS': 'C:\\Program Files\\Microsoft Visual Studio 14.0\\Common7\\Tools\\', 'USERDOMAIN': 'Ithaca-L1', 'PSMODULEPATH': 'C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\', 'VS90COMNTOOLS': 'C:\\Program Files\\Microsoft Visual Studio 9.0\\Common7\\Tools\\', 'COMMONPROGRAMFILES': 'C:\\Program Files\\Common Files', 'PROCESSOR_IDENTIFIER': 'x86 Family 6 Model 15 Stepping 6, GenuineIntel', 'PROGRAMFILES': 'C:\\Program Files', 'PROCESSOR_REVISION': '0f06', 'SYSTEMROOT': 'C:\\Windows', 'PATH': 'C:\\Python27\\;C:\\Python27\\Scripts;C:\\ProgramData\\Oracle\\Java\\javapath;C:\\Program Files\\Common Files\\Microsoft Shared\\Windows Live;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files\\Intel\\WiFi\\bin\\;C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\;C:\\Program Files\\Windows Live\\Shared;C:\\Program Files\\Common Files\\Acronis\\SnapAPI\\;c:\\Program Files\\Microsoft SQL Server\\100\\Tools\\Binn\\;c:\\Program Files\\Microsoft SQL Server\\100\\DTS\\Binn\\;C:\\Program Files\\Skype\\Phone\\;C:\\Users\\ithaca\\.cargo\\bin;C:\\Program Files\\Nmap;C:\\Program Files\\Intel\\WiFi\\bin\\;C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\;C:\\Users\\ithaca\\AppData\\Local\\Programs\\Fiddler', 'COMSPEC': 'C:\\Windows\\system32\\cmd.exe', 'ASL.LOG': 'Destination=file', 'TEMP': 'C:\\Users\\ithaca\\AppData\\Local\\Temp', 'PROCESSOR_ARCHITECTURE': 'x86', 'ALLUSERSPROFILE': 'C:\\ProgramData', 'LOCALAPPDATA': 'C:\\Users\\ithaca\\AppData\\Local', 'HOMEPATH': '\\Users\\ithaca', 'VS120COMNTOOLS': 'C:\\Program Files\\Microsoft Visual Studio 12.0\\Common7\\Tools\\', 'USERNAME': 'ithaca', 'LOGONSERVER': '\\\\ITHACA-L1', 'PROMPT': '$P$G', 'SESSIONNAME': 'Console', 'PROGRAMDATA': 'C:\\ProgramData', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC', 'C:\\OPENSSL-WIN32\x08IN': 'C:\\Python27\\;C:\\Python27\\Scripts;C:\\ProgramData\\Oracle\\Java\\javapath;C:\\Program Files\\Common Files\\Microsoft Shared\\Windows Live;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files\\Intel\\WiFi\\bin\\;C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\;C:\\Program Files\\Windows Live\\Shared;C:\\Program Files\\Common Files\\Acronis\\SnapAPI\\;c:\\Program Files\\Microsoft SQL Server\\100\\Tools\\Binn\\;c:\\Program Files\\Microsoft SQL Server\\100\\DTS\\Binn\\;C:\\Program Files\\Skype\\Phone\\;C:\\Users\\ithaca\\.cargo\\bin;C:\\Program Files\\Nmap;C:\\Program Files\\Intel\\WiFi\\bin\\;C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\;C:\\Users\\ithaca\\AppData\\Local\\Programs\\Fiddler;C:\\Python27;C:\\Python27\\Scripts', 'FP_NO_HOST_CHECK': 'NO', 'WINDIR': 'C:\\Windows', 'OPENSSL_CONF': 'C:\\OpenSSL-Win32\\bin\\openssl.cfg', 'C:\\PYTHON27\\;C:\\PYTHON27\\SCRIPTS\\;': 'C:\\Python27\\;C:\\Python27\\Scripts;C:\\ProgramData\\Oracle\\Java\\javapath;C:\\Program Files\\Common Files\\Microsoft Shared\\Windows Live;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files\\Intel\\WiFi\\bin\\;C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\;C:\\Program Files\\Windows Live\\Shared;C:\\Program Files\\Common Files\\Acronis\\SnapAPI\\;c:\\Program Files\\Microsoft SQL Server\\100\\Tools\\Binn\\;c:\\Program Files\\Microsoft SQL Server\\100\\DTS\\Binn\\;C:\\Program Files\\Skype\\Phone\\;C:\\Users\\ithaca\\.cargo\\bin;C:\\Program Files\\Nmap;C:\\Program Files\\Intel\\WiFi\\bin\\;C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\;C:\\Users\\ithaca\\AppData\\Local\\Programs\\Fiddler;C:\\Python27;C:\\Python27\\Scripts', 'APPDATA': 'C:\\Users\\ithaca\\AppData\\Roaming', 'HOMEDRIVE': 'C:', 'SYSTEMDRIVE': 'C:', 'NUMBER_OF_PROCESSORS': '2', 'PROCESSOR_LEVEL': '6', 'OS': 'Windows_NT', 'PUBLIC': 'C:\\Users\\Public', 'USERPROFILE': 'C:\\Users\\ithaca'}